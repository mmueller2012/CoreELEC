From a18029a4b68f156d9344a59ff17923b61a8ca341 Mon Sep 17 00:00:00 2001
From: cdu13a <cdu13a@gmail.com>
Date: Thu, 26 Dec 2019 16:57:05 -0500
Subject: temp: hdmitx register read fix

---
 .../media/vout/hdmitx/hdmi_tx_20/hw/reg_ops.c | 105 +++++++++++++++++-
 1 file changed, 104 insertions(+), 1 deletion(-)

diff --git a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/reg_ops.c b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/reg_ops.c
index 7440ed5f1511..4bb67d6bda2d 100644
--- a/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/reg_ops.c
+++ b/drivers/amlogic/media/vout/hdmitx/hdmi_tx_20/hw/reg_ops.c
@@ -33,6 +33,7 @@
 #include <linux/amlogic/media/vout/hdmi_tx/hdmi_tx_module.h>
 #include <linux/arm-smccc.h>
 #include "common.h"
+#include "mach_reg.h"
 #include "hdmi_tx_reg.h"
 #include "reg_ops.h"
 
@@ -339,6 +340,74 @@ unsigned int hdmitx_rd_reg_normal(unsigned int addr)
 	return data;
 }
 
+#define __asmeq(x, y)  ".ifnc " x "," y " ; .err ; .endif\n\t"
+
+void sec_reg_write(unsigned int *addr, unsigned int value)
+{
+	register long x0 asm("x0") = 0x82000019;
+	register long x1 asm("x1") = (unsigned long)addr;
+	register long x2 asm("x2") = value;
+	asm volatile(
+		__asmeq("%0", "x0")
+		__asmeq("%1", "x1")
+		__asmeq("%2", "x2")
+		"smc #0\n"
+		: : "r"(x0), "r"(x1), "r"(x2)
+	);
+}
+
+unsigned int sec_reg_read(unsigned int *addr)
+{
+	register long x0 asm("x0") = 0x82000018;
+	register long x1 asm("x1") = (unsigned long)addr;
+	asm volatile(
+		__asmeq("%0", "x0")
+		__asmeq("%1", "x1")
+		"smc #0\n"
+		: "+r"(x0) : "r"(x1)
+	);
+	return (unsigned int)(x0&0xffffffff);
+}
+
+static DEFINE_SPINLOCK(reg_lock);
+
+unsigned int hdmitx_rd_reg_old(unsigned int addr)
+{
+	unsigned int data = 0;
+	unsigned long offset = (addr & DWC_OFFSET_MASK) >> 24;
+	unsigned long flags, fiq_flag;
+	if (addr & SEC_OFFSET) {
+		addr = addr & 0xffff;
+		sec_reg_write((unsigned int *)(unsigned long)
+			TO_PHY_ADDR(P_HDMITX_ADDR_PORT_SEC + offset), addr);
+		sec_reg_write((unsigned int *)(unsigned long)
+			TO_PHY_ADDR(P_HDMITX_ADDR_PORT_SEC + offset), addr);
+		data = sec_reg_read((unsigned int *)(unsigned long)
+			TO_PHY_ADDR(P_HDMITX_DATA_PORT_SEC + offset));
+	} else {
+		addr = addr & 0xffff;
+		spin_lock_irqsave(&reg_lock, flags);
+		raw_local_save_flags(fiq_flag);
+		local_fiq_disable();
+
+/*
+ * If addr is located at 0x5020 ~ 0x667e in DWC,
+ * then should operate twice
+ */
+		hd_write_reg(P_HDMITX_ADDR_PORT + offset, addr);
+		hd_write_reg(P_HDMITX_ADDR_PORT + offset, addr);
+		data = hd_read_reg(P_HDMITX_DATA_PORT + offset);
+		data = hd_read_reg(P_HDMITX_DATA_PORT + offset);
+
+		raw_local_irq_restore(fiq_flag);
+		spin_unlock_irqrestore(&reg_lock, flags);
+	}
+    
+	pr_debug(REG "%s rd[0x%x] 0x%x\n", offset ? "DWC" : "TOP",
+			addr, data);
+	return data;
+}
+
 unsigned int hdmitx_rd_reg_g12a(unsigned int addr)
 {
 	unsigned int large_offset = addr >> 24;
@@ -379,6 +448,8 @@ unsigned int hdmitx_rd_reg(unsigned int addr)
 
 	if (hdev->chip_type >= MESON_CPU_ID_G12A)
 		data = hdmitx_rd_reg_g12a(addr);
+	else if (hdev->chip_type == MESON_CPU_ID_GXL)
+		data = hdmitx_rd_reg_old(addr);
 	else
 		data = hdmitx_rd_reg_normal(addr);
 	return data;
@@ -399,6 +470,36 @@ void hdmitx_wr_reg_normal(unsigned int addr, unsigned int data)
 			addr, data);
 }
 
+void hdmitx_wr_reg_old(unsigned int addr, unsigned int data)
+{
+	unsigned long flags, fiq_flag;
+	unsigned long offset = (addr & DWC_OFFSET_MASK) >> 24;
+
+	if (addr & SEC_OFFSET) {
+		addr = addr & 0xffff;
+		sec_reg_write((unsigned int *)(unsigned long)
+			TO_PHY_ADDR(P_HDMITX_ADDR_PORT_SEC + offset), addr);
+		sec_reg_write((unsigned int *)(unsigned long)
+			TO_PHY_ADDR(P_HDMITX_ADDR_PORT_SEC + offset), addr);
+		sec_reg_write((unsigned int *)(unsigned long)
+			TO_PHY_ADDR(P_HDMITX_DATA_PORT_SEC + offset), data);
+	} else {
+		addr = addr & 0xffff;
+		spin_lock_irqsave(&reg_lock, flags);
+		raw_local_save_flags(fiq_flag);
+		local_fiq_disable();
+
+		hd_write_reg(P_HDMITX_ADDR_PORT + offset, addr);
+		hd_write_reg(P_HDMITX_ADDR_PORT + offset, addr);
+		hd_write_reg(P_HDMITX_DATA_PORT + offset, data);
+		raw_local_irq_restore(fiq_flag);
+		spin_unlock_irqrestore(&reg_lock, flags);
+	}
+
+	pr_debug("%s wr[0x%x] 0x%x\n", offset ? "DWC" : "TOP",
+			addr, data);
+}
+
 void hdmitx_wr_reg_g12a(unsigned int addr, unsigned int data)
 {
 	unsigned int large_offset = addr >> 24;
@@ -435,7 +536,9 @@ void hdmitx_wr_reg(unsigned int addr, unsigned int data)
 
 	if (hdev->chip_type >= MESON_CPU_ID_G12A)
 		hdmitx_wr_reg_g12a(addr, data);
-	else
+	else if (hdev->chip_type == MESON_CPU_ID_GXL)
+		hdmitx_wr_reg_old(addr, data);
+    else
 		hdmitx_wr_reg_normal(addr, data);
 }
 EXPORT_SYMBOL(hdmitx_wr_reg);
-- 
2.17.1

